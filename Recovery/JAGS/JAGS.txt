# Latent mixture model used to:
# 1) Generate data from synthetic agents 
# 2) Do model recovery 
# 3) Do parameter recovery/parameter estimation
#
# Cumulative Prospect Theory (pt) presented by Tversky and Kahneman (1992)
# LML model (lml) presented by Peters et al. (2020)
#
# Note that the model indicator variable z, is parameter expanded to take on 8 different values rather than 2. This
# allows better convergence. It allows 8 different values of the indicator variable to map to each model, such that 
# a z of 1,3,5,7 maps to the pt model, 2,4,6,8 map to the LML model


model{

##LIKELIHOOD
for (g in 1:nGambles){
for (i in 1:nAgents){
for (c in 1:nChunks){
for (t in 1:nTrials){

	#-----------pt-model-----------
	u_a1_pt[g,i,c,t]		= pow(dx1[g,i,c,c,t],alpha_pt[i,c])						#prospect utility, computed by exponentiating current wealth by alpha   	
	u_a2_pt[g,i,c,c,t]		= pow(dx2[g,i,c,c,t],alpha_pt[i,c])						 	
	u_b1_pt[g,i,c,c,t]		= pow(dx3[g,i,c,c,t],alpha_pt[i,c])
	u_b2_pt[g,i,c,c,t]		= pow(dx4[g,i,c,c,t],alpha_pt[i,c])

	den_w_a1_pt[g,i,c,c,t]	= delta_pt[i,c]*pow(pa1[g,i,c,c,t],gamma_pt[i,c]) + pow((1-pa1[g,i,c,c,t]),gamma_pt[i,c]) #the denominator of the weighting function
	den_w_a2_pt[g,i,c,c,t]	= delta_pt[i,c]*pow(pa1[g,i,c,c,t],gamma_pt[i,c]) + pow((1-pa1[g,i,c,c,t]),gamma_pt[i,c]) 
	den_w_b1_pt[g,i,c,c,t]	= delta_pt[i,c]*pow(pb1[g,i,c,c,t],gamma_pt[i,c]) + pow((1-pb1[g,i,c,c,t]),gamma_pt[i,c])
	den_w_b2_pt[g,i,c,c,t]	= delta_pt[i,c]*pow(pb1[g,i,c,c,t],gamma_pt[i,c]) + pow((1-pb1[g,i,c,c,t]),gamma_pt[i,c])

	w_a1_pt[g,i,c,c,t]		= delta_pt[i,c]*pow(pa1[g,i,c,c,t],gamma_pt[i,c]) / den_w_a1_pt[g,i,c,c,t]		#weightfunction calculated with two parameter function (Goldstein and Einhorn (1987))
	w_a2_pt[g,i,c,c,t]		= delta_pt[i,c]*pow((1-pa1[g,i,c,c,t]),gamma_pt[i,c]) / den_w_a2_pt[g,i,c,c,t]			
	w_b1_pt[g,i,c,c,t]		= delta_pt[i,c]*pow(pb1[g,i,c,c,t],gamma_pt[i,c]) / den_w_b1_pt[g,i,c,c,t]
	w_b2_pt[g,i,c,c,t]		= delta_pt[i,c]*pow((1-pb1[g,i,c,t]),gamma_pt[i,c]) / den_w_b2_pt[g,i,c,t]

	ev_a_pt[g,i,c,t]		= u_a1_pt[g,i,c,t] * w_a1_pt[g,i,c,t] + u_a2_pt[g,i,c,t] * w_a2_pt[g,i,c,t]	#The expectedvalue of the gamble is the utility multiplied with the weight
	ev_b_pt[g,i,c,t]		= u_b1_pt[g,i,c,t] * w_b1_pt[g,i,c,t] + u_b2_pt[g,i,c,t] * w_b2_pt[g,i,c,t]
	
	dev_pt[g,i,c,t] 		= ev_a_pt[g,i,c,t] - ev_b_pt[g,i,c,t]					#difference in expected values 

	sdev_pt[g,i,c,t]		= -1 * beta_pt[i,c] * dev_pt[g,i,c,t] 					#sensitivity-scaled difference in ev

	theta[g,i,c,t,1] 	= (1)/(1+(exp(sdev_pt[g,i,c,t]))) 						#choice probability
	theta[g,i,c,t,3] 	= (1)/(1+(exp(sdev_pt[g,i,c,t])))
	theta[g,i,c,t,5] 	= (1)/(1+(exp(sdev_pt[g,i,c,t])))
	theta[g,i,c,t,7] 	= (1)/(1+(exp(sdev_pt[g,i,c,t])))

	#-----------lml-model-----------
	u_a1_lml[g,i,c,t]		= pow(dx1[g,i,c,t],alpha_lml[i,c])						#prospect utility, computed by exponentiating current wealth by alpha   	
	u_a2_lml[g,i,c,t]		= pow(dx2[g,i,c,t],alpha_lml[i,c])	
	u_b1_lml[g,i,c,t]		= pow(dx3[g,i,c,t],alpha_lml[i,c])
	u_b2_lml[g,i,c,t]		= pow(dx4[g,i,c,t],alpha_lml[i,c])

	tmp_w_a1_lml[g,i,c,t]	= pa1[g,i,c,t] + sqrt(pa1[g,i,c,t]/t) 					#weighfunction (numerator)
	tmp_w_a2_lml[g,i,c,t]	= (1-pa1[g,i,c,t]) + sqrt((1-pa1[g,i,c,t])/t) 
	tmp_w_b1_lml[g,i,c,t]	= pb1[g,i,c,t] + sqrt(pb1[g,i,c,t]/t)
	tmp_w_b2_lml[g,i,c,t]	= (1-pb1[g,i,c,t]) + sqrt((1-pb1[g,i,c,t])/t) 

	w_a1_lml[g,i,c,t]		= tmp_w_a1_lml[g,i,c,t] / ( tmp_w_a1_lml[g,i,c,t] + tmp_w_a2_lml[g,i,c,t] )	#normalizing the weights
	w_a2_lml[g,i,c,t]		= tmp_w_a2_lml[g,i,c,t] / ( tmp_w_a1_lml[g,i,c,t] + tmp_w_a2_lml[g,i,c,t] )
	w_b1_lml[g,i,c,t]		= tmp_w_b1_lml[g,i,c,t] / ( tmp_w_b1_lml[g,i,c,t] + tmp_w_b2_lml[g,i,c,t] )
	w_b2_lml[g,i,c,t]		= tmp_w_b2_lml[g,i,c,t] / ( tmp_w_b1_lml[g,i,c,t] + tmp_w_b2_lml[g,i,c,t] )
	
	ev_a_lml[g,i,c,t]		= u_a1_lml[g,i,c,t] * w_a1_lml[g,i,c,t] + u_a2_lml[g,i,c,t] * w_a2_lml[g,i,c,t]	#The expected value of the gamble is the utility multiplied with the weight
	ev_b_lml[g,i,c,t]		= u_b1_lml[g,i,c,t] * w_b1_lml[g,i,c,t] + u_b2_lml[g,i,c,t] * w_b2_lml[g,i,c,t]

	dev_lml[g,i,c,t] 		= ev_a_lml[g,i,c,t] - ev_b_lml[g,i,c,t]					#difference in expected values 

	sdev_lml[g,i,c,t]	  	= -1 * beta_lml[i,c] * dev_lml[g,i,c,t] 					#sensitivity-scaled difference in ev

	theta[g,i,c,t,2] 		= (1)/(1+(exp(sdev_lml[g,i,c,t])))
	theta[g,i,c,t,4] 		= (1)/(1+(exp(sdev_lml[g,i,c,t])))
	theta[g,i,c,t,6] 		= (1)/(1+(exp(sdev_lml[g,i,c,t])))
	theta[g,i,c,t,8] 		= (1)/(1+(exp(sdev_lml[g,i,c,t]))) 	

        # Choice
        y[g,i,c,t]           	~ dbern(theta[g,i,c,t,z[i]]) 

}# end of trials 
}# end of agents
}# end of gambles

##PRIORS

#indicator variables 
#the model indicator variable z can take on any value from 1:n, and is subject to two stochastic processes, to prevent getting stuck
#the n values map onto just 2 models, and is simply a means of obtaining parameter expansion for the model indication
for (i in 1:nAgents){    
px_z1[i]    ~ dcat(pz[])                                 #parameter expansion variable for z, takes on integers 1:n with equal probability
px_z2[i]    ~ dcat(pz[])                                 #parameter expansion variable for z, takes on integers 1:n with equal probability
delta_z1[i] = px_z2[i]-1                                 #parameter expansion variable for z, takes on integers 0:n-1 with equal probability
sum_z[i]    = px_z1[i]+delta_z1[i]                       #sum takes on integers 1:2*n -1 with equal probability
z[i]        = (sum_z[i] - (8 * trunc(sum_z[i]/8))) + 1   #modulo n, adding 1 to return to values 1 to 8
}#end of agents       

#submodels
for (i in 1:nAgents){	
for (c in 1:nChunks={

#-----------pt-----------
beta_pt[i,c]	= exp(log_beta_pt[i,c])                          	#lognormally distributed priors
log_beta_pt[i,c]	~ dnorm(mu_log_beta_pt[c], tau_log_beta_pt[c])  	#log beta_pt sampled from normal dist.

alpha_pt[i,c]	= exp(log_alpha_pt[i,c])                          #lognormally distributed priors
log_alpha_pt[i,c]	~ dnorm(mu_log_alpha_pt[c], tau_log_alpha_pt[c])  	#log alpha_pt sampled from normal dist.

delta_pt[i,c]	= exp(log_delta_pt[i,c])                          #lognormally distributed priors
log_delta_pt[i,c]	~ dnorm(mu_log_delta_pt[c], tau_log_delta_pt[c])  	#log delta_pt sampled from normal dist.

gamma_pt[i,c]	= exp(log_gamma_pt[i,c])                          #lognormally distributed priors
log_gamma_pt[i,c]	~ dnorm(mu_log_gamma_pt[c], tau_log_gamma_pt[c])  	#log gamma_pt sampled from normal dist.	

#-----------lml-----------
beta_lml[i,c]		= exp(log_beta_lml[i,c])                        	#lognormally distributed priors
log_beta_lml[i,c]		~ dnorm(mu_log_beta_lml[c], tau_log_beta_lml[c])  	#log beta_lml sampled from normal dist.

alpha_lml[i,c]		= exp(log_alpha_lml[i,c])                        	#lognormally distributed priors
log_alpha_lml[i,c]	~ dnorm(mu_log_alpha_lml[c], tau_log_alpha_lml[c])	#log alpha_lml sampled from normal dist.	

}#end of chunks
}#end of subjects


##HYPERPRIORS
for (c in 1:nChunks){
#-----------pt----------- 
mu_log_beta_pt[c]       ~ dunif(muLogBetaL,muLogBetaU)  		#prior on mean of dist. of log beta_pt
tau_log_beta_pt[c]      = pow(sigma_log_beta_pt[c],-2)   		#prior on precision of dist. of log beta_pt
sigma_log_beta_pt[c]    ~ dunif(sigmaLogBetaL,sigmaLogBetaU)	#prior on std of dist. of log beta_pt

mu_log_alpha_pt[c]      ~ dunif(muLogAlphaL,muLogAlphaU)         	#prior on mean of dist. of log alpha_pt 
tau_log_alpha_pt[c]     = pow(sigma_log_alpha_pt[c],-2)          	#prior on precision of dist. of log alpha_pt
sigma_log_alpha_pt[c]   ~ dunif(sigmaLogAlphaL,sigmaLogAlphaU)   	#prior on std of dist. of log alpha_pt

mu_log_delta_pt[c]      ~ dunif(muLogDeltaL,muLogDeltaU)         	#prior on mean of dist. of log delta_pt
tau_log_delta_pt[c]     = pow(sigma_log_delta_pt[c],-2)           	#prior on precision of dist. of log delta_pt
sigma_log_delta_pt[c]   ~ dunif(sigmaLogDeltaL,sigmaLogDeltaU)   	#prior on std of dist. of log delta_pt

mu_log_gamma_pt[c]      ~ dunif(muLogGammaL,muLogGammaU)          	#prior on mean of dist. of log gamma_pt
tau_log_gamma_pt[c]     = pow(sigma_log_gamma_pt[c],-2)           	#prior on precision of dist. of log gamma_pt
sigma_log_gamma_pt[c]   ~ dunif(sigmaLogGammaL,sigmaLogGammaU)  	#prior on std of dist. of log gamma_pt


#-----------lml-----------
mu_log_beta_lml[c]       ~ dunif(muLogBetaL,muLogBetaU)		#prior on mean of dist. of log beta_lml
tau_log_beta_lml[c]      = pow(sigma_log_beta_lml[c],-2)   		#prior on precision of dist. of log beta_lml
sigma_log_beta_lml[c]    ~ dunif(sigmaLogBetaL,sigmaLogBetaU)      #prior on std of dist. of log beta_lml

mu_log_alpha_lml[c]      ~ dunif(muLogAlphaL,muLogAlphaU)         	#prior on mean of dist. of log alpha_pt 
tau_log_alpha_lml[c]     = pow(sigma_log_alpha_lml[c],-2)          	#prior on precision of dist. of log alpha_pt
sigma_log_alpha_lml[c]   ~ dunif(sigmaLogAlphaL,sigmaLogAlphaU) 	#prior on std of dist. of log alpha_pt
}#end of chunks
}