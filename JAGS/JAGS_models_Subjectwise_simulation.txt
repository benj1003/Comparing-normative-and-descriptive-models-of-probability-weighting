# Simulate choises for n Agents with predefined constant priors
#
# Cumulative Prospect Theory (pt)
# LML-model (lml)

model{

##LIKELIHOOD
  
for (i in 1:nAgents){
	for (s in 1:nSamples){
		for (t in 1:nTrials){

		#pt-model
		u_a1_pt[i,s,t]		= pow(w_a1[i,s,t],alpha_pt[i])						#prospect utility, computed by exponentiating current wealth by alpha   	
		u_a2_pt[i,s,t]		= pow(w_a2[i,s,t],alpha_pt[i])						 	
		u_b1_pt[i,s,t]		= pow(w_b1[i,s,t],alpha_pt[i])
		u_b2_pt[i,s,t]		= pow(w_b2[i,s,t],alpha_pt[i])

		den_w_a1_pt[i,s,t]	= delta_pt[i]*pow(p_a1,gamma_pt[i]) + pow((1-p_a1),gamma_pt[i]) 	#the denominator of the weighting function
		den_w_a2_pt[i,s,t]	= delta_pt[i]*pow(p_a2,gamma_pt[i]) + pow((1-p_a2),gamma_pt[i]) 
		den_w_b1_pt[i,s,t]	= delta_pt[i]*pow(p_b1,gamma_pt[i]) + pow((1-p_b1),gamma_pt[i])
		den_w_b2_pt[i,s,t]	= delta_pt[i]*pow(p_b2,gamma_pt[i]) + pow((1-p_b2),gamma_pt[i])

		w_a1_pt[i,s,t]		= delta_pt[i]*pow(p_a1[i,t],gamma_pt[i]) / den_w_a1_pt[i,t]		#weightfunction calculated with two parameter function (Goldstein and Einhorn (1987))
		w_a2_pt[i,s,t]		= delta_pt[i]*pow(p_a2[i,t],gamma_pt[i]) / den_w_a2_pt[i,t]			
		w_b1_pt[i,s,t]		= delta_pt[i]*pow(p_b1[i,t],gamma_pt[i]) / den_w_b1_pt[i,t]
		w_b2_pt[i,s,t]		= delta_pt[i]*pow(p_b2[i,t],gamma_pt[i]) / den_w_b2_pt[i,t]

		ev_a_pt[i,s,t]		= u_a1_pt[i,t] * w_a1_pt[i,t] + u_a2_pt[i,t] * w_a2_pt[i,t]		#The expectedvalue of the gamble is the utility multiplied with the weight
		ev_b_pt[i,s,t]		= u_b1_pt[i,t] * w_b1_pt[i,t] + u_b2_pt[i,t] * w_b2_pt[i,t]
	
		dev_pt[i,s,t] 		= v_a_pt[i,t] - v_b_pt[i,t]						#difference in expected values 

		sdev_pt[i,s,t]		= -1 * beta_pt[i] * dev_pt[i,t] 					#sensitivity-scaled difference in ev

		theta_pt[i,s,t] 	= (1)/(1+(exp(sdev_pt[i,t]))) 						#choice probability

		y_pt[i,s,t]           	~ dbern(theta_pt[i,t])							#choice function



		#lml-model
		u_a1_lml[i,s,t]		= pow(w_a1[i,s,t],alpha_lml[i])							#prospect utility, computed by exponentiating current wealth by alpha   	
		u_a2_lml[i,s,t]		= pow(w_a2[i,s,t],alpha_lml[i])	
		u_b1_lml[i,s,t]		= pow(w_b1[i,s,t],alpha_lml[i])
		u_b2_lml[i,s,t]		= pow(w_b2[i,s,t],alpha_lml[i])

		tmp_w_a1_lml[i,s,t]	= ( delta_lml[i] * p_a1 + gamma_lml[i] * sqrt(p_a1/T) ) 			#weighfunction (numerator)
		tmp_w_a2_lml[i,s,t]	= ( delta_lml[i] * p_a2 + gamma_lml[i] * sqrt(p_a2/T) ) 
		tmp_w_b1_lml[i,s,t]	= ( delta_lml[i] * p_b1 + gamma_lml[i] * sqrt(p_b1/T) )
		tmp_w_b2_lml[i,s,t]	= ( delta_lml[i] * p_b2 + gamma_lml[i] * sqrt(p_b2/T) ) 

		w_a1_lml[i,s,t]		= w_a1_lml[i,s,t] / ( w_a1_lml[i,s,t] + w_a2_lml[i,s,t] )			#normalizing the weights
		w_a2_lml[i,s,t]		= w_a2_lml[i,s,t] / ( w_a1_lml[i,s,t] + w_a2_lml[i,s,t] )
		w_b1_lml[i,s,t]		= w_b1_lml[i,s,t] / ( w_b1_lml[i,s,t] + w_b2_lml[i,s,t] )
		w_b2_lml[i,s,t]		= w_b2_lml[i,s,t] / ( w_b1_lml[i,s,t] + w_b2_lml[i,s,t] )
	
		ev_a_lml[i,s,t]		= u_a1_lml[i,s,t] * w_a1_lml[i,s,t] + u_a2_lml[i,s,t] * w_a2_lml[i,s,t]		#The expectedvalue of the gamble is the utility multiplied with the weight
		ev_b_lml[i,s,t]		= u_b1_lml[i,s,t] * w_b1_lml[i,s,t] + u_b2_lml[i,s,t] * w_b2_lml[i,s,t]

		dev_lml[i,s,t] 		= v_a_lml[i,s,t] - v_b_lml[i,s,t]						#difference in expected values 

		sdev_lml[i,s,t]	  	= -1 * beta_lml[i] * dev_lml[i,s,t] 						#sensitivity-scaled difference in ev

		theta_lml[i,s,t] 	= (1)/(1+(exp(sdev_lml[i,s,t]))) 						#choice probability

		y_lml[i,s,t]           	~ dbern(theta_lml[i,s,t])							#choice function
        
	
        }# end of trials 
  }# end of samples
}# end of agents

##PRIORS
#Set to fixed values for simulation

#submodels
for (i in 1:nAgents){	

#pt
beta_pt[i]	= exp(-1)              
alpha_pt[i]	= 0.6
delta_pt[i]	= 0.8
gamma_pt[i]	= 0.4
        
#lml  -----------
beta_lml[i]		= exp(-1)       
alpha_lml[i]		= 0.6
delta_lml[i]		= 1.0
gamma_lml[i]		= 1.0

}#end of agents


##HYPERPRIORS
#Not set for simulation (priors fixed)


##DATA PROCESSING

#compute absolute values of outcomes
adx1=abs(dx1)            #outcome 1
adx2=abs(dx2)            #outcome 2
adx3=abs(dx3)            #outcome 3   
adx4=abs(dx4)            #outcome 4

}